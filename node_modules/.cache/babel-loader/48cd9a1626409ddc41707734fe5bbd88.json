{"ast":null,"code":"var _jsxFileName = \"/home/pankaj/react-assignment/src/App.js\";\nimport React from 'react';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      decimal: '',\n      error: '',\n      roman: ''\n    };\n    this.convertRoman = this.convertRoman.bind(this);\n  }\n\n  convertRoman(e) {\n    if (isNaN(e.target.value)) {\n      this.setState({\n        error: 'Please enter a valid number.'\n      });\n    } else {\n      this.setState({\n        error: ''\n      });\n\n      if (e.target.value === 0) {\n        this.setState({\n          error: 'Value must be in range 1 to 1000.'\n        });\n      } else {\n        //console.log(DecimalToRoman(e.target.value));\n        this.setState({\n          roman: DecimalToRoman(e.target.value)\n        });\n      }\n    }\n\n    this.setState({\n      decimal: e.target.value\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, \"Decimal Number\"), React.createElement(\"input\", {\n      type: \"text\",\n      value: this.state.decimal,\n      onChange: this.convertRoman,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, this.state.decimal), React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, \" \", this.state.error), React.createElement(\"h6\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, \" \", this.state.roman), React.createElement(TextField, {\n      id: \"standard-search\",\n      label: \"Search field\",\n      type: \"search\",\n      className: classes.textField,\n      margin: \"normal\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    })));\n  }\n\n}\n\nfunction DecimalToRoman(num) {\n  var romanMatrix = [[1000, 'M'], [900, 'CM'], [500, 'D'], [400, 'CD'], [100, 'C'], [90, 'XC'], [50, 'L'], [40, 'XL'], [10, 'X'], [9, 'IX'], [5, 'V'], [4, 'IV'], [1, 'I']];\n\n  for (var i = 0; i < romanMatrix.length; i++) {\n    if (num === 0) {\n      return '';\n    }\n\n    if (num >= romanMatrix[i][0]) {\n      return romanMatrix[i][1] + DecimalToRoman(num - romanMatrix[i][0]);\n    }\n  }\n}\n\nexport default App;","map":{"version":3,"sources":["/home/pankaj/react-assignment/src/App.js"],"names":["React","App","Component","constructor","props","state","decimal","error","roman","convertRoman","bind","e","isNaN","target","value","setState","DecimalToRoman","render","classes","textField","num","romanMatrix","i","length"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass App extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            decimal : '',\n            error : '',\n            roman : ''\n        };\n\n        this.convertRoman = this.convertRoman.bind(this);\n    };\n\n    convertRoman(e) {\n\n        if(isNaN(e.target.value)) {\n            this.setState({ error : 'Please enter a valid number.' });\n        } else {\n            this.setState({ error : '' });\n\n            if(e.target.value === 0) {\n                this.setState({ error : 'Value must be in range 1 to 1000.' });\n            } else {\n                //console.log(DecimalToRoman(e.target.value));\n                this.setState({ roman : DecimalToRoman(e.target.value) })\n            }\n        }\n\n        this.setState({ decimal : e.target.value });\n    }\n\n    render() {\n        return (\n            <div>\n                <form>\n                    <label>Decimal Number</label>\n                    <input type=\"text\" value={this.state.decimal} onChange={this.convertRoman}/>\n\n                    <h1>{ this.state.decimal}</h1>\n                    <h4> { this.state.error}</h4>\n                    <h6> { this.state.roman}</h6>\n\n                    <TextField\n                        id=\"standard-search\"\n                        label=\"Search field\"\n                        type=\"search\"\n                        className={classes.textField}\n                        margin=\"normal\"\n                    />\n                </form>\n            </div>\n        );\n    }\n}\n\nfunction DecimalToRoman(num) {\n\n    var romanMatrix = [\n        [1000, 'M'],\n        [900, 'CM'],\n        [500, 'D'],\n        [400, 'CD'],\n        [100, 'C'],\n        [90, 'XC'],\n        [50, 'L'],\n        [40, 'XL'],\n        [10, 'X'],\n        [9, 'IX'],\n        [5, 'V'],\n        [4, 'IV'],\n        [1, 'I']\n    ];\n\n    for (var i = 0; i < romanMatrix.length; i++) {\n        if(num === 0) {\n            return '';\n        }\n\n        if (num >= romanMatrix[i][0]) {\n            return romanMatrix[i][1] + DecimalToRoman(num - romanMatrix[i][0]);\n        }\n    }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}