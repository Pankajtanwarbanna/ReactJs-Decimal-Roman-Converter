{"ast":null,"code":"var _jsxFileName = \"/home/pankaj/react-assignment/src/App.js\";\nimport React from 'react';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      decimal: '',\n      error: '',\n      roman: ''\n    };\n    this.convertRoman = this.convertRoman.bind(this);\n  }\n\n  convertRoman(e) {\n    if (isNaN(e.target.value)) {\n      // If input is not a decimalber\n      this.setState({\n        error: 'Please enter a valid decimalber.'\n      });\n    } else {\n      // If input is a valid decimalber\n      this.setState({\n        error: ''\n      });\n      this.setState({\n        roman: ''\n      });\n\n      if (e.target.value === '') {\n        // Nothing is input\n        this.setState({\n          error: ''\n        });\n        this.setState({\n          roman: ''\n        });\n      } else if (decimalber(e.target.value) > 3999 || decimalber(e.target.value) <= 0) {\n        // Value must be in [1,3999]\n        this.setState({\n          error: 'Value must be in range 1 to 3999'\n        });\n      } else {\n        //console.log(e.target.value);\n        //console.log(DecimalToRoman(e.target.value));\n        // Convert to Roman\n        this.setState({\n          error: ''\n        });\n        this.setState({\n          roman: DecimalToRoman(e.target.value)\n        });\n      }\n    }\n\n    this.setState({\n      decimal: e.target.value\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"MainFrame\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      className: \"main-heading\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      className: \"btn\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, \"Decimal to Roman Converter\")))), React.createElement(\"form\", {\n      className: \"converter-form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, \"Decimal \"), React.createElement(\"input\", {\n      className: \"form-styling\",\n      type: \"text\",\n      value: this.state.decimal,\n      onChange: this.convertRoman,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      className: \"errorLabel\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, \" \", this.state.error), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, \"Roman \"), React.createElement(\"input\", {\n      className: \"form-styling\",\n      type: \"text\",\n      value: this.state.roman,\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nfunction DecimalToRoman(decimal) {\n  var roman2DMatrix = [[1000, 'M'], [900, 'CM'], [500, 'D'], [400, 'CD'], [100, 'C'], [90, 'XC'], [50, 'L'], [40, 'XL'], [10, 'X'], [9, 'IX'], [5, 'V'], [4, 'IV'], [1, 'I']];\n\n  for (let i = 0; i < roman2DMatrix.length; i++) {\n    if (decimal === 0) {\n      return '';\n    }\n\n    if (decimal >= roman2DMatrix[i][0]) {\n      return roman2DMatrix[i][1] + DecimalToRoman(decimal - roman2DMatrix[i][0]);\n    }\n  }\n}\n\nexport default App;","map":{"version":3,"sources":["/home/pankaj/react-assignment/src/App.js"],"names":["React","App","Component","constructor","props","state","decimal","error","roman","convertRoman","bind","e","isNaN","target","value","setState","decimalber","DecimalToRoman","render","roman2DMatrix","i","length"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\n\n\nclass App extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            decimal : '',\n            error : '',\n            roman : ''\n        };\n\n        this.convertRoman = this.convertRoman.bind(this);\n    };\n\n    convertRoman(e) {\n\n        if(isNaN(e.target.value)) {\n            // If input is not a decimalber\n            this.setState({ error : 'Please enter a valid decimalber.' });\n        } else {\n            // If input is a valid decimalber\n            this.setState({ error : '' });\n            this.setState({ roman : '' });\n\n            if (e.target.value === ''){\n                // Nothing is input\n                this.setState({ error : '' });\n                this.setState({ roman : ''});\n            } else if(decimalber(e.target.value) > 3999 || decimalber(e.target.value) <= 0) {\n                // Value must be in [1,3999]\n                this.setState({ error : 'Value must be in range 1 to 3999' });\n            } else {\n                //console.log(e.target.value);\n                //console.log(DecimalToRoman(e.target.value));\n                // Convert to Roman\n                this.setState({ error : '' });\n                this.setState({ roman : DecimalToRoman(e.target.value) })\n            }\n        }\n\n        this.setState({ decimal : e.target.value });\n    }\n\n    render() {\n        return (\n            <div className=\"container\">\n                <div className=\"MainFrame\">\n                    <div className=\"header\">\n                        <ul>\n                            <li className=\"main-heading\"><a className=\"btn\">Decimal to Roman Converter</a></li>\n                        </ul>\n                    </div>\n\n                    <form className=\"converter-form\">\n                        <label>Decimal </label>\n                        <input className=\"form-styling\" type=\"text\" value={this.state.decimal} onChange={this.convertRoman}/>\n                        <label className=\"errorLabel\"> { this.state.error}</label>\n\n                        <label>Roman </label>\n                        <input className=\"form-styling\" type=\"text\" value={this.state.roman} disabled/>\n\n                    </form>\n\n\n                </div>\n\n\n            </div>\n        );\n    }\n}\n\nfunction DecimalToRoman(decimal) {\n\n    var roman2DMatrix = [\n        [1000, 'M'],\n        [900, 'CM'],\n        [500, 'D'],\n        [400, 'CD'],\n        [100, 'C'],\n        [90, 'XC'],\n        [50, 'L'],\n        [40, 'XL'],\n        [10, 'X'],\n        [9, 'IX'],\n        [5, 'V'],\n        [4, 'IV'],\n        [1, 'I']\n    ];\n\n    for (let i = 0; i < roman2DMatrix.length; i++) {\n        if(decimal === 0) {\n            return '';\n        }\n\n        if (decimal >= roman2DMatrix[i][0]) {\n            return roman2DMatrix[i][1] + DecimalToRoman(decimal - roman2DMatrix[i][0]);\n        }\n    }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}